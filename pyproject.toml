[build-system]
requires = ["hatchling", "uv-dynamic-versioning"]
build-backend = "hatchling.build"

[tool.hatch.version]
source = "uv-dynamic-versioning"

[tool.uv-dynamic-versioning]
vcs = "git"
style = "pep440"
pattern = "default-unprefixed"

[project]
name = "otterapi"
dynamic = ["version"]
license = 'MIT'
authors = [{ name = "Dan Plischke" }]
description = "A cute little companion that generates type-safe clients from OpenAPI documents."
readme = "README.md"
requires-python = ">=3.10"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Utilities",
    "Operating System :: Microsoft :: Windows",
    "Operating System :: POSIX",
    "Operating System :: Unix",
    "Operating System :: MacOS",
]

dependencies = [
    "httpx>=0.28.1",
    "openapi-pydantic>=0.5.1",
    "pydantic-settings>=2.11.0",
    "pyyaml>=6.0.3",
    "typer>=0.20.0",
    "universal-pathlib>=0.3.4",
]

[project.urls]
Source = "https://github.com/danplischke/otter"

[project.scripts]
otter = "otterapi.__main__:app"

[dependency-groups]
dev = [
    "ruff>=0.14.2",
    "twine>=6.2.0",
]
test = [
    "pytest>=8.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "httpx>=0.25.0",
    "responses>=0.24.0",
    "pytest-mock>=3.12.0",
    "fastapi>=0.104.0"
]

[tool.hatch.build.targets.wheel]
only-include = ["otterapi/*", "/README.md"]

[tool.hatch.build.targets.sdist]
include = ["otterapi/*", "/README.md"]

[tool.ruff]
exclude = [".venv", "venv", "build", "dist", "__pycache__", ".eggs"]

[tool.ruff.lint]
extend-select = [
    "Q",
    "RUF100",
    "RUF018", # https://docs.astral.sh/ruff/rules/assignment-in-assert/
    "C90",
    "UP",
    "I",
    "D",
    "TID251",
]
flake8-quotes = { inline-quotes = "single", multiline-quotes = "double" }
mccabe = { max-complexity = 15 }
ignore = [
    "D100", # ignore missing docstring in module
    "D102", # ignore missing docstring in public method
    "D104", # ignore missing docstring in public package
    "D105", # ignore missing docstring in magic methods
    "D107", # ignore missing docstring in __init__ methods
]

[tool.ruff.lint.isort]
combine-as-imports = true
known-first-party = ["pydantic_ai", "pydantic_evals", "pydantic_graph"]
# weird issue with ruff thinking fasta2a is still editable
known-third-party = ["fasta2a"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.format]
# don't format python in docstrings, pytest-examples takes care of it
docstring-code-format = false
quote-style = "single"

[tool.pytest.ini_options]
minversion = "8.0"
addopts = [
    "-ra",
    "-q",
    "--strict-markers",
    "--strict-config",
    "--tb=short"
]
testpaths = [
    "otterapi/tests",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

[tool.coverage.run]
source = ["otterapi"]
omit = [
    "otterapi/tests/*",
    "*/tests/*",
    "*/__pycache__/*",
    "*/site-packages/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

